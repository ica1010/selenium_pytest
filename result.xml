<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="1" failures="0" skipped="0" tests="1" time="302.936" timestamp="2024-06-20T20:05:36.702801" hostname="Ghislin-ThinkPad-P53"><testcase classname="test.authentification_test.TestLoginLogout" name="test_login_logout" time="302.585"><error message="failed on setup with &quot;selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 293,877&#10;  (Session info: chrome=126.0.6478.114)&#10;Stacktrace:&#10;#0 0x5b3166b2a70a &lt;unknown&gt;&#10;#1 0x5b316680d0dc &lt;unknown&gt;&#10;#2 0x5b31667f4456 &lt;unknown&gt;&#10;#3 0x5b31667f4035 &lt;unknown&gt;&#10;#4 0x5b31667f1f76 &lt;unknown&gt;&#10;#5 0x5b31667f25ef &lt;unknown&gt;&#10;#6 0x5b3166802f17 &lt;unknown&gt;&#10;#7 0x5b316681946e &lt;unknown&gt;&#10;#8 0x5b316681eb6b &lt;unknown&gt;&#10;#9 0x5b31667f2d3a &lt;unknown&gt;&#10;#10 0x5b31668192ee &lt;unknown&gt;&#10;#11 0x5b316689b8f6 &lt;unknown&gt;&#10;#12 0x5b316687c613 &lt;unknown&gt;&#10;#13 0x5b316684c4f7 &lt;unknown&gt;&#10;#14 0x5b316684ce4e &lt;unknown&gt;&#10;#15 0x5b3166af08db &lt;unknown&gt;&#10;#16 0x5b3166af4981 &lt;unknown&gt;&#10;#17 0x5b3166adc3ce &lt;unknown&gt;&#10;#18 0x5b3166af54e2 &lt;unknown&gt;&#10;#19 0x5b3166ac0d2f &lt;unknown&gt;&#10;#20 0x5b3166b1a108 &lt;unknown&gt;&#10;#21 0x5b3166b1a2e0 &lt;unknown&gt;&#10;#22 0x5b3166b2983c &lt;unknown&gt;&#10;#23 0x75592789ca94 &lt;unknown&gt;&#10;#24 0x755927929c3c &lt;unknown&gt;&quot;">cls = &lt;class 'authentification_test.TestLoginLogout'&gt;

    @classmethod
    def setUpClass(cls):
    
        os.environ['WDM_LOCAL'] = '/usr/bin/google-chrome'
    
        # Configure WebDriver with options and specified version
        chrome_options = Options()
        chrome_options.add_argument("--start-maximized")
        # Uncomment the next line to run tests in headless mode
        # chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
    
        # Initialize WebDriver with the specified version and cache_path
        cls.driver = webdriver.Chrome(
            service=ChromeService(ChromeDriverManager(driver_version='126.0.6478.114').install()),
            options=chrome_options
        )
    
        # Open the login page
&gt;       cls.driver.get("https://pay.kagoservices.com/")

test/authentification_test.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:356: in get
    self.execute(Command.GET, {"url": url})
.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7e35e947d130&gt;
response = {'status': 500, 'value': '{"value":{"error":"timeout","message":"timeout: Timed out receiving message from renderer: 2...\\n#22 0x5b3166b2983c \\u003Cunknown&gt;\\n#23 0x75592789ca94 \\u003Cunknown&gt;\\n#24 0x755927929c3c \\u003Cunknown&gt;\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 293,877
E         (Session info: chrome=126.0.6478.114)
E       Stacktrace:
E       #0 0x5b3166b2a70a &lt;unknown&gt;
E       #1 0x5b316680d0dc &lt;unknown&gt;
E       #2 0x5b31667f4456 &lt;unknown&gt;
E       #3 0x5b31667f4035 &lt;unknown&gt;
E       #4 0x5b31667f1f76 &lt;unknown&gt;
E       #5 0x5b31667f25ef &lt;unknown&gt;
E       #6 0x5b3166802f17 &lt;unknown&gt;
E       #7 0x5b316681946e &lt;unknown&gt;
E       #8 0x5b316681eb6b &lt;unknown&gt;
E       #9 0x5b31667f2d3a &lt;unknown&gt;
E       #10 0x5b31668192ee &lt;unknown&gt;
E       #11 0x5b316689b8f6 &lt;unknown&gt;
E       #12 0x5b316687c613 &lt;unknown&gt;
E       #13 0x5b316684c4f7 &lt;unknown&gt;
E       #14 0x5b316684ce4e &lt;unknown&gt;
E       #15 0x5b3166af08db &lt;unknown&gt;
E       #16 0x5b3166af4981 &lt;unknown&gt;
E       #17 0x5b3166adc3ce &lt;unknown&gt;
E       #18 0x5b3166af54e2 &lt;unknown&gt;
E       #19 0x5b3166ac0d2f &lt;unknown&gt;
E       #20 0x5b3166b1a108 &lt;unknown&gt;
E       #21 0x5b3166b1a2e0 &lt;unknown&gt;
E       #22 0x5b3166b2983c &lt;unknown&gt;
E       #23 0x75592789ca94 &lt;unknown&gt;
E       #24 0x755927929c3c &lt;unknown&gt;

.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException</error></testcase></testsuite></testsuites>